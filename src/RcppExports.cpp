// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// find_dropouts
DataFrame find_dropouts(DataFrame df);
RcppExport SEXP _dropout_find_dropouts(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(find_dropouts(df));
    return rcpp_result_gen;
END_RCPP
}
// find_na_sequences
List find_na_sequences(DataFrame sec_data, int section_min);
RcppExport SEXP _dropout_find_na_sequences(SEXP sec_dataSEXP, SEXP section_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type sec_data(sec_dataSEXP);
    Rcpp::traits::input_parameter< int >::type section_min(section_minSEXP);
    rcpp_result_gen = Rcpp::wrap(find_na_sequences(sec_data, section_min));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dropout_find_dropouts", (DL_FUNC) &_dropout_find_dropouts, 1},
    {"_dropout_find_na_sequences", (DL_FUNC) &_dropout_find_na_sequences, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dropout(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
